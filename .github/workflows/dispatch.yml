name: Generate release

on: 
  repository_dispatch

concurrency:
    group: ${{ github.workflow }}
    cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v26

      - name: Checkout ssddq/editor-release
        uses: actions/checkout@v4
        with:
          path: editor-release

      - name: Checkout ssddq/editor
        uses: actions/checkout@v4
        with:
          repository: ssddq/editor
          submodules: recursive
          path: editor
          ref: ${{ github.event.client_payload.ref }}

      - name: Download Nix cache
        uses: actions/cache/restore@v4
        id: nix-cache
        with:
          path: /tmp/nix-cache
          key: "nix-cache"

      - name: Unpack Nix cache
        working-directory: ${{ github.workspace }}/editor
        if: ${{ steps.nix-cache.outputs.cache-hit }}
        run: |
          nix copy --from /tmp/nix-cache .#editor-shell --no-check-sigs
          sudo rm -rf /tmp/nix-cache

      - name: Restore Cabal cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.local/state/cabal
            ${{ github.workspace }}/editor/dist-newstyle
          key: "cabal-cache"

      - name: Compile
        working-directory: ${{ github.workspace }}/editor
        run: |
            nix develop --command \
              cabal configure --enable-tests 
            nix develop --command \
              cabal update
            nix develop --command \
              cabal build
            nix develop --command \
              cabal install --install-method=copy --installdir=bin --overwrite-policy=always
            sudo apt install upx
            strip bin/editor
            upx bin/editor

      - name: Save binary
        uses: actions/upload-artifact@v4
        with:
          name: editor
          path: ${{ github.workspace }}/editor/bin/editor

      - name: Generate Nix cache
        working-directory: ${{ github.workspace }}/editor
        run:
          nix copy --to /tmp/nix-cache .#editor-shell --no-check-sigs
      
      - name: Delete previous caches
        working-directory: ${{ github.workspace }}/editor-release
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete nix-cache --confirm || true
          gh actions-cache delete cabal-cache --confirm || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save Nix cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: /tmp/nix-cache
          key: "nix-cache"

      - name: Save Cabal cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            ~/.local/state/cabal
            ${{ github.workspace }}/editor/dist-newstyle
          key: "cabal-cache"

  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: editor

      - name: Update flake.lock and upload binary for release
        run: |
          sudo apt install jq moreutils
          git config user.name "github-actions[bot]"
          git config user.email "<41898282+github-actions[bot]@users.noreply.github.com>"
          hash=$(nix hash path editor)
          jq --arg hash "$hash" '.nodes.release.locked.narHash=$hash' flake.lock | sponge flake.lock
          git add flake.lock
          git commit --amend --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" --no-edit
          git push --force
          gh release delete binary --cleanup-tag --yes || true
          gh release create binary editor --latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
